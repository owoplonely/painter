{"version":3,"sources":["PixelGrid.js","ColorSelect.js","App.js","serviceWorker.js","index.js"],"names":["PixelGrid","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setUpDragHandler","initialTop","initialLeft","mouseInitialX","mouseInitialY","deltaLeft","deltaTop","dragging","canvasWrapper","addEventListener","e","parseFloat","style","top","left","clientX","clientY","Math","sqrt","pow","handleDotClick","x","floor","layerX","state","zoomRatio","y","layerY","setState","dothoverX","dothoverY","setUpZoomHandler","prevZoom","newZoom","deltaY","dx","dy","preventDefault","draw","color","ctx","fillStyle","fillRect","parseInt","socket","emit","setUpPickHandler","canvas","isPickingColor","console","log","url","cursor","document","createElement","getContext","width","height","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","arc","PI","fill","toDataURL","makeColor","getImageData","data","concat","hexColor","Array","from","slice","map","it","toString","padEnd","join","onPickColor","setPickColorState","dotHoverY","_this2","on","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","pixelData","image","createImageFromArrayBuffer","wrap","_context","prev","next","buf","Promise","resolve","blob","Blob","type","Image","onload","URL","createObjectURL","src","sent","drawImage","stop","_x","apply","arguments","_ref3","forceUpdate","el","getElementById","ReactDom","createPortal","react_default","onClick","_this3","border","display","overflow","position","ref","renderPickColorBtn","className","boxShadow","pointerEvents","zoom","imageRendering","PureComponent","colors","btnStyle","liStyle","listStyle","float","ColorSelect","value","onChange","onChangeColor","target","key","objectSpread","backgroundColor","App","handleChangeColor","currentColor","io","src_PixelGrid","id","src_ColorSelect","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d28fb60a.chunk.js","sourcesContent":["import React, {PureComponent} from 'react'\r\nimport ReactDom from 'react-dom'\r\n\r\nfunction makeColor(color) {\r\n  // 现场画一个取色鼠标，并返回它的dataURL\r\n  var cursor = document.createElement('canvas'),\r\n  ctx = cursor.getContext('2d');\r\n  cursor.width = 41;\r\n  cursor.height = 41;\r\n\r\n  ctx.beginPath();\r\n  ctx.lineWidth = 2;\r\n  ctx.strokeStyle = '#000000';\r\n  ctx.moveTo(0, 6);\r\n  ctx.lineTo(12, 6);\r\n  ctx.moveTo(6, 0);\r\n  ctx.lineTo(6, 12);\r\n  ctx.stroke();\r\n\r\n  ctx.beginPath();\r\n  ctx.arc(25, 25, 14, 0, 2 * Math.PI, false);\r\n  ctx.lineWidth = 2;\r\n  ctx.strokeStyle = '#000000';\r\n  ctx.stroke();\r\n  ctx.beginPath();\r\n  ctx.arc(25, 25, 13.4, 0, 2 * Math.PI, false);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n\r\n  return cursor.toDataURL()\r\n}\r\n\r\n// 用canvas重构pixelGrid\r\nclass PixelGrid extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    this.canvas = null\r\n    this.state = {\r\n      zoomRatio: 1,\r\n      dothoverX: -1,\r\n      dotHoverY: -1,\r\n      isPickingColor: false\r\n    }\r\n  }\r\n\r\n  setUpDragHandler = () => { \r\n    var initialTop, initialLeft, mouseInitialX, mouseInitialY, dragging = false\r\n    var deltaLeft, deltaTop\r\n    this.canvasWrapper.addEventListener('mousedown', e => {\r\n      // 点击的时候记录拖拽开始时的鼠标位置和canvas位置，并把dragging状态置为true\r\n      initialTop = parseFloat(this.canvasWrapper.style.top)\r\n      initialLeft = parseFloat(this.canvasWrapper.style.left)\r\n      mouseInitialX = e.clientX\r\n      mouseInitialY = e.clientY\r\n      dragging = true\r\n    })\r\n    this.canvasWrapper.addEventListener('mouseup', e => {\r\n      // 拖拽结束\r\n      dragging = false\r\n      // 防止拖拽结束时的误点击\r\n      if (Math.sqrt(deltaLeft ** 2 + deltaTop ** 2) < 3) {\r\n        this.handleDotClick(e)\r\n      }\r\n    })\r\n    this.canvasWrapper.addEventListener('mousemove', e => {\r\n      if (dragging) {\r\n        // 拖拽过程中\r\n        // 偏移量\r\n        deltaLeft = e.clientX - mouseInitialX\r\n        deltaTop = e.clientY - mouseInitialY\r\n        this.canvasWrapper.style.left = initialLeft + deltaLeft + 'px'\r\n        this.canvasWrapper.style.top = initialTop + deltaTop + 'px'\r\n      }\r\n    })\r\n    // 框出当前选中的格子\r\n    this.canvasWrapper.addEventListener('mousemove', e => {\r\n      var x = Math.floor(e.layerX / this.state.zoomRatio) * this.state.zoomRatio\r\n      var y = Math.floor(e.layerY / this.state.zoomRatio) * this.state.zoomRatio\r\n        this.setState({\r\n          dothoverX: x + 'px',\r\n          dothoverY: y + 'px'\r\n        })\r\n    })\r\n  }\r\n\r\n  setUpZoomHandler = () => {\r\n    // 缩放\r\n    this.canvasWrapper.addEventListener('wheel', e => {\r\n      var prevZoom = this.state.zoomRatio\r\n      var newZoom = e.deltaY < 0 ? prevZoom + 1 : prevZoom - 1\r\n      if (newZoom < 1) {\r\n        // zoom不应该小于1，如果小于1了将其重置为1并复位\r\n        newZoom = 1\r\n        this.canvasWrapper.style.left = 0\r\n        this.canvasWrapper.style.top = 0\r\n      }\r\n      // 更新zoom属性\r\n      this.setState({\r\n        zoomRatio: newZoom\r\n      })\r\n      // 使缩放前后鼠标所在位置上的点的位置保持不变\r\n      // zoom是以元素左上角为原点进行缩放的\r\n      var dx = (newZoom / prevZoom - 1) * e.layerX\r\n      var dy = (newZoom / prevZoom - 1) * e.layerY\r\n      this.canvasWrapper.style.left = (parseFloat(this.canvasWrapper.style.left) - dx) + 'px'\r\n      this.canvasWrapper.style.top = (parseFloat(this.canvasWrapper.style.top) - dy) + 'px'\r\n      e.preventDefault()\r\n    })\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.setUpZoomHandler()\r\n    this.setUpDragHandler()\r\n    this.setUpPickHandler()\r\n    this.ctx = this.canvas.getContext('2d')\r\n    // 接收初始数据并渲染\r\n    this.props.socket.on('init-data', async pixelData => {\r\n      // 将pixelData转换成一个image对象\r\n      var image = await createImageFromArrayBuffer(pixelData)\r\n      // 这里的image的宽高为为什么是0？--要到image的onload时候再画\r\n      this.canvas.width = image.width\r\n      this.canvas.height = image.height\r\n      // 把image画canvas上\r\n      this.ctx.drawImage(image, 0, 0)\r\n      function createImageFromArrayBuffer(buf) {\r\n        return new Promise(resolve => {\r\n          var blob = new Blob([buf], {type: 'image/png'})\r\n          var image = new Image()\r\n          image.onload = () => resolve(image)\r\n          var url = URL.createObjectURL(blob)\r\n          image.src = url\r\n        })\r\n      }\r\n    })\r\n    this.props.socket.on('update-dot', ({x, y, color}) => {\r\n      this.draw(x, y, color)\r\n    })\r\n    this.forceUpdate()\r\n  }\r\n\r\n  draw = (x, y, color) => {\r\n    this.ctx.fillStyle = color\r\n    // 画一个点\r\n    this.ctx.fillRect(x, y, 1, 1)\r\n  }\r\n\r\n  handleDotClick = (e) => {\r\n    // e是react的事件对象，通过e.nativeEvent取得浏览器的原生事件对象\r\n    var x = parseInt(e.layerX/this.state.zoomRatio)\r\n    var y = parseInt(e.layerY/this.state.zoomRatio)\r\n    this.props.socket.emit('draw-dot', {\r\n      x,\r\n      y,\r\n      color: this.props.color\r\n    })\r\n  }\r\n\r\n  setUpPickHandler = () => {\r\n    this.canvas.addEventListener('mousemove', e => {\r\n      if (this.state.isPickingColor) {\r\n        console.log(e.layerX,e.layerY)\r\n        // 取色中...\r\n        // 鼠标所在位置的颜色\r\n        var colorArr = this.ctx.getImageData(parseInt(e.layerX/this.state.zoomRatio), parseInt(e.layerY / this.state.zoomRatio), 1, 1).data\r\n        var cssColor = 'rgba(' + colorArr + ')'\r\n        var url = makeColor(cssColor)\r\n        this.canvas.style.cursor = `url(${url}) 6 6, crosshair`\r\n      }\r\n    })\r\n    this.canvas.addEventListener('click', e => {\r\n      if (this.state.isPickingColor) {\r\n        // 取色完毕\r\n        // 向上层组件传递选中的颜色\r\n        var colorArr = Array.from(this.ctx.getImageData(parseInt(e.layerX/this.state.zoomRatio), parseInt(e.layerY / this.state.zoomRatio), 1, 1).data).slice(0, 3)\r\n        var hexColor = '#' + colorArr.map(it => it.toString(16).padEnd(2, '0')).join('')\r\n        console.log(hexColor)\r\n        this.props.onPickColor(hexColor)\r\n        // 退出取色状态\r\n        this.setState({\r\n          isPickingColor: false\r\n        })\r\n        // 重置cursor样式\r\n        this.canvas.style.cursor = ''\r\n      }\r\n    })\r\n  }\r\n\r\n  setPickColorState = () => {\r\n    this.setState({\r\n      isPickingColor: true\r\n    })\r\n  }\r\n\r\n  renderPickColorBtn() {\r\n    var el = document.getElementById('colorPicker')\r\n    if (!el) {\r\n      return null\r\n    }\r\n    return ReactDom.createPortal((\r\n      <button onClick={this.setPickColorState}>{this.state.isPickingColor ? '正在取色' : '取色'}</button>\r\n    ), el)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{border: '1px solid', display: 'inline-block', height: this.props.height, width: this.props.width, overflow: 'hidden', position:'relative'}}>\r\n        <div style={{position: 'absolute', left: 0, top: 0, overflow: 'hidden'}} ref={el => this.canvasWrapper = el}>\r\n          {this.renderPickColorBtn()}\r\n          <span className=\"dot-hover-box\" style={{\r\n            boxShadow: '0 0 1px 1px black',\r\n            width: this.state.zoomRatio + 'px',\r\n            height: this.state.zoomRatio + 'px',\r\n            position: 'absolute',\r\n            left: this.state.dothoverX,\r\n            top: this.state.dothoverY,\r\n            pointerEvents: 'none'\r\n          }}></span>\r\n          <canvas\r\n            ref={el => this.canvas = el}\r\n            style={{zoom: this.state.zoomRatio, imageRendering: 'pixelated'}}></canvas>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PixelGrid","import React, {Component} from 'react'\r\nimport { NONAME } from 'dns';\r\n\r\nconst colors = ['#ff0000', '#ffff00', '#00ff00', '#0000ff', '#800080', '#ffa500']\r\nconst btnStyle = {\r\n  width: '1em',\r\n  height: '1em',\r\n}\r\nconst liStyle = {\r\n  listStyle: 'none',\r\n  float: 'left',\r\n}\r\n\r\nfunction ColorSelect(props) {\r\n  console.log('cs rendered')\r\n  return (\r\n    <ul>\r\n      <li><input type=\"color\" value={props.color} onChange={(e) => props.onChangeColor(e.target.value)} /></li>\r\n      {\r\n        colors.map(color => (\r\n          <li\r\n            key={color}\r\n            style={liStyle}>\r\n              <button\r\n                style={{...btnStyle, backgroundColor: color}}\r\n                onClick={() => props.onChangeColor(color)}></button>\r\n          </li>\r\n        ))\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ColorSelect","import React,{Component} from 'react';\nimport PixelGrid from './PixelGrid.js'\nimport ColorSelect from './ColorSelect.js'\nimport './App.css';\nimport io from 'socket.io-client'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pixelData: null,\n      currentColor: '#ffffff',\n    }\n    // 默认连接的是当前端口\n    this.socket = io()\n  }\n  componentDidMount() {\n    // Q:为什么发送ajax要在这个生命周期函数里执行？\n    // A:此时DOM已经渲染好了，可以操作DOM。而且如果在willMount里运行setState的话，如果setState是异步更新，因为紧接着就运行render，状态就不会更新到state对象上。\n    this.socket.on('init-data', (data) => {\n      console.log(data)\n      // 拿到数据，接下来的任务就是用一个组件把它渲染出来了\n      this.setState({\n        pixelData: data\n      })\n    })\n  }\n  handleChangeColor = (color) => {\n    this.setState({\n      currentColor: color\n    })\n  }\n  render() {\n    console.log('app rendered')\n    return (\n      <div>\n        <PixelGrid width={200} height={200} socket={this.socket} color={this.state.currentColor} onPickColor={this.handleChangeColor}/>\n        <span id=\"colorPicker\"></span>\n        <ColorSelect color={this.state.currentColor} onChangeColor={this.handleChangeColor}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}